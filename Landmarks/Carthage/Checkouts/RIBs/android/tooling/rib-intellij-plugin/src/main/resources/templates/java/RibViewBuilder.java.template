package ${package_name};

import android.support.annotation.NonNull;
import android.view.LayoutInflater;
import android.view.ViewGroup;

import com.uber.rib.core.InteractorBaseComponent;
import com.uber.rib.core.ViewBuilder;
import java.lang.annotation.Retention;

import javax.inject.Scope;
import javax.inject.Qualifier;

import dagger.Provides;
import dagger.Binds;
import dagger.BindsInstance;

import static java.lang.annotation.RetentionPolicy.CLASS;

/**
 * Builder for the {@link ${rib_name}Scope}.
 *
 * TODO describe this scope's responsibility as a whole.
 */
public class ${rib_name}Builder
    extends ViewBuilder<${rib_name}View, ${rib_name}Router, ${rib_name}Builder.ParentComponent> {

  public ${rib_name}Builder(ParentComponent dependency) {
    super(dependency);
  }

  /**
   * Builds a new {@link ${rib_name}Router}.
   *
   * @param parentViewGroup parent view group that this router's view will be added to.
   * @return a new {@link ${rib_name}Router}.
   */
  public ${rib_name}Router build(ViewGroup parentViewGroup) {
    ${rib_name}View view = createView(parentViewGroup);
    ${rib_name}Interactor interactor = new ${rib_name}Interactor();
    Component component = Dagger${rib_name}Builder_Component.builder()
        .parentComponent(getDependency())
        .view(view)
        .interactor(interactor)
        .build();
    return component.${rib_name_to_lower}Router();
  }

  @Override
  protected ${rib_name}View inflateView(LayoutInflater inflater, ViewGroup parentViewGroup) {
    // TODO: Inflate a new view using the provided inflater, or create a new view programatically using the
    // provided context from the parentViewGroup.
    return null;
  }

  public interface ParentComponent {
    // TODO: Define dependencies required from your parent interactor here.
  }

  @dagger.Module
  public abstract static class Module {

    @${rib_name}Scope
    @Binds
    abstract ${rib_name}Interactor.${rib_name}Presenter presenter(${rib_name}View view);

    @${rib_name}Scope
    @Provides
    static ${rib_name}Router router(
      Component component,
      ${rib_name}View view,
      ${rib_name}Interactor interactor) {
      return new ${rib_name}Router(view, interactor, component);
    }

    // TODO: Create provider methods for dependencies created by this Rib. These should be static.
  }

  @${rib_name}Scope
  @dagger.Component(modules = Module.class,
       dependencies = ParentComponent.class)
  interface Component extends InteractorBaseComponent<${rib_name}Interactor>, BuilderComponent {

    @dagger.Component.Builder
    interface Builder {
      @BindsInstance
      Builder interactor(${rib_name}Interactor interactor);
      @BindsInstance
      Builder view(${rib_name}View view);
      Builder parentComponent(ParentComponent component);
      Component build();
    }
  }

  interface BuilderComponent  {
    ${rib_name}Router ${rib_name_to_lower}Router();
  }

  @Scope
  @Retention(CLASS)
  @interface ${rib_name}Scope { }

  @Qualifier
  @Retention(CLASS)
  @interface ${rib_name}Internal { }
}
