package ${package_name}

import com.uber.rib.core.Builder
import com.uber.rib.core.EmptyPresenter
import com.uber.rib.core.InteractorBaseComponent
import java.lang.annotation.Retention

import javax.inject.Qualifier
import javax.inject.Scope

import dagger.Provides
import dagger.BindsInstance

import java.lang.annotation.RetentionPolicy.CLASS

class ${rib_name}Builder(dependency: ParentComponent) : Builder<${rib_name}Router, ${rib_name}Builder.ParentComponent>(dependency) {

  /**
   * Builds a new [${rib_name}Router].
   *
   * @return a new [${rib_name}Router].
   */
  fun build(): ${rib_name}Router {
    val interactor = ${rib_name}Interactor()
    val component = Dagger${rib_name}Builder_Component.builder()
        .parentComponent(dependency)
        .interactor(interactor)
        .build()

    return component.${rib_name_to_lower}Router()
  }

  interface ParentComponent {
    // TODO: Define dependencies required from your parent interactor here.
  }


  @dagger.Module
  abstract class Module {

    @dagger.Module
    companion object {

      @${rib_name}Scope
      @Provides
      @JvmStatic
      internal fun presenter(): EmptyPresenter {
        return EmptyPresenter()
      }

      @${rib_name}Scope
      @Provides
      @JvmStatic
      internal fun router(component: Component, interactor: ${rib_name}Interactor): ${rib_name}Router {
        return ${rib_name}Router(interactor, component)
      }

      // TODO: Create provider methods for dependencies created by this Rib. These methods should be static.
    }
  }


  @${rib_name}Scope
  @dagger.Component(modules = arrayOf(Module::class), dependencies = arrayOf(ParentComponent::class))
  interface Component : InteractorBaseComponent<${rib_name}Interactor>, BuilderComponent {

    @dagger.Component.Builder
    interface Builder {
      @BindsInstance
      fun interactor(interactor: ${rib_name}Interactor): Builder

      fun parentComponent(component: ParentComponent): Builder
      fun build(): Component
    }

  }

  interface BuilderComponent {
    fun ${rib_name_to_lower}Router(): ${rib_name}Router
  }

  @Scope
  @Retention(CLASS)
  internal annotation class ${rib_name}Scope


  @Qualifier
  @Retention(CLASS)
  internal annotation class ${rib_name}Internal
}
